{"version":3,"sources":["logo.svg","serviceWorker.js","Avatarlist.js","Demo.js","Avatar.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Avatarlist","Component","props","className","src","name","alt","work","avatarlistarray","id","avatararraycard","map","avatarcard","i","Avatar","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,2MCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCFSC,G,MCZIC,Y,iBDEA,SAACC,GAChB,OACQ,yBAAKC,UAAU,8DACX,yBAAKC,IAAG,sCAAiCF,EAAMG,MAAQC,IAAI,WAC3D,4BAAKJ,EAAMG,MACX,uBAAGF,UAAU,MAAMD,EAAMK,SELnCC,EAAkB,CACpB,CACIC,GAAI,EACJJ,KAAM,SACNE,KAAM,YAEV,CACIE,GAAI,EACJJ,KAAM,QACNE,KAAM,iBAEV,CACIE,GAAI,EACJJ,KAAM,WACNE,KAAM,WAEV,CACIE,GAAI,EACJJ,KAAM,SACNE,KAAM,aAKRG,EAAkBF,EAAgBG,KAAK,SAACC,EAAYC,GACtD,OAAO,kBAAC,EAAD,CAAYJ,GAAID,EAAgBK,GAAGJ,GACvBJ,KAAMG,EAAgBK,GAAGR,KACzBE,KAAMC,EAAgBK,GAAGN,UAajCO,EAVA,SAACZ,GACZ,OACI,yBAAKC,UAAU,YACf,iDACKO,EACL,gDChCRK,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAEAC,SAASC,eAAe,SJqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5b8ac23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nimport './Avatar.css'\r\n\r\n\r\n\r\nconst Avatarlist = (props) => {\r\n    return (\r\n            <div className=\"avatarstyle   ma4 bg-light-purple dib pa3 tc grow shadow-4\">\r\n                <img src={`https://joeschmoe.io/api/v1/${props.name}`} alt=\"Avatar\" />\r\n                <h1>{props.name}</h1>\r\n                <p className=\"tc\">{props.work}</p>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Avatarlist;","import React, {Component} from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './Demo.css'\r\n\r\nclass Demo extends Component{\r\n    render(){\r\n        return <div className=\"maindiv_style\"> \r\n                    <h1>Hello {this.props.name}</h1>\r\n                    <p>Welcome to my React App</p>\r\n                </div>\r\n    }\r\n}\r\n\r\nexport default Demo;","import React from 'react';\r\nimport './Avatar.css';\r\n\r\nimport 'tachyons';\r\nimport Avatarlist from './Avatarlist';\r\n\r\nconst avatarlistarray = [\r\n    {\r\n        id: 1,\r\n        name: \"Khalid\",\r\n        work: \"Database\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Hamza\",\r\n        work: \"Web Developer\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Abdullah\",\r\n        work: \"BackEnd\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"farhan\",\r\n        work: \"FrontEnd\"\r\n    }\r\n\r\n]\r\n\r\nconst avatararraycard = avatarlistarray.map( (avatarcard, i) => {\r\n    return <Avatarlist id={avatarlistarray[i].id} \r\n                       name={avatarlistarray[i].name}\r\n                       work={avatarlistarray[i].work} />\r\n})\r\n\r\nconst Avatar = (props) =>{\r\n    return (\r\n        <div className=\"mainpage\">\r\n        <h1>Welcome to Avatar</h1>\r\n            {avatararraycard}\r\n        <button> Subscribe</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Demo from './Demo';\nimport Demo2 from './Demo2';\nimport Avatar from './Avatar';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/*<Demo2 name=\"Khalid Pervez!\"/>*/}\n    <Avatar />\n  </React.StrictMode>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}